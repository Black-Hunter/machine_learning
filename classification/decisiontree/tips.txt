(1) pass by reference
Pass by reference avoids copy of big objects. But it has side effect, since changes made to the parameter will reflect on the corresponding 
argument. If the function will not make changes to the parameter, we can add modifier const to the reference parameter to ensure it. If the 
function does make changes to the parameter, and we don't want the changes reflects on the corresponding argument, then we shouldn't pass by 
reference, use pass by copy instead.

(2) return as reference
return as reference also avoids copy of big objects. But we shouldn't ensure the object referred by the return reference should exists during the
lifecycle of the variable assigned.

